// Copyright (c) Strange Loop Games. All rights reserved.
// See LICENSE file in the project root for full license information.
// <auto-generated from WorldObjectTemplate.tt />

namespace Eco.Mods.TechTree
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using Eco.Core.Items;
    using Eco.Gameplay.Blocks;
    using Eco.Gameplay.Components;
    using Eco.Gameplay.Components.Auth;
    using Eco.Gameplay.DynamicValues;
    using Eco.Gameplay.Economy;
    using Eco.Gameplay.Housing;
    using Eco.Gameplay.Interactions;
    using Eco.Gameplay.Items;
    using Eco.Gameplay.Modules;
    using Eco.Gameplay.Minimap;
    using Eco.Gameplay.Objects;
    using Eco.Gameplay.Players;
    using Eco.Gameplay.Property;
    using Eco.Gameplay.Skills;
    using Eco.Gameplay.Systems.TextLinks;
    using Eco.Gameplay.Pipes.LiquidComponents;
    using Eco.Gameplay.Pipes.Gases;
    using Eco.Gameplay.Systems.Tooltip;
    using Eco.Shared;
    using Eco.Shared.Math;
    using Eco.Shared.Localization;
    using Eco.Shared.Serialization;
    using Eco.Shared.Utils;
    using Eco.Shared.View;
    using Eco.Shared.Items;
    using Eco.Gameplay.Pipes;
    using Eco.World.Blocks;
    using Eco.Simulation.Time;
    using Eco.Gameplay.Housing.PropertyValues;
    using Eco.Gameplay.Systems.Messaging.Notifications;
    using System.Runtime.CompilerServices;

    [Serialized]
    [RequireComponent(typeof(PropertyAuthComponent))]
    [RequireComponent(typeof(LinkComponent))]
    [RequireComponent(typeof(CraftingComponent))]
    [RequireComponent(typeof(PublicStorageComponent))]
    [RequireComponent(typeof(SolidAttachedSurfaceRequirementComponent))]
    public partial class TurkeyCoopObject : WorldObject, IRepresentsItem
    {
        public override LocString DisplayName { get { return Localizer.DoStr("Turkey Coop"); } }
        public override TableTextureMode TableTexture => TableTextureMode.Wood;
        public virtual Type RepresentedItemType { get { return typeof(TurkeyCoopItem); } }
        [Serialized] private double eggTime;

        protected override void Initialize()
        {
            this.ModsPreInitialize();
            eggTime = WorldTime.Seconds;
            var storage = this.GetComponent<PublicStorageComponent>();
            storage.Initialize(10);
            storage.Storage.AddInvRestriction(new StackLimitRestriction(10));
            this.GetComponent<PublicStorageComponent>().Inventory.AddInvRestriction(new SpecificItemTypesRestriction(new System.Type[] { typeof(DomesticatedTurkeyItem), typeof(EggItem), typeof(FeatherItem) })); // can't store block or large itemsa
            this.ModsPostInitialize();
        }

        public override void Tick()
        {
            base.Tick();
            var turkey = Item.Get(typeof(DomesticatedTurkeyItem));
            var egg = Item.Get(typeof(EggItem));
            var storage = this.GetComponent<PublicStorageComponent>().Inventory;
            var turkeyCount = storage.TotalNumberOfItems(turkey);
            var eggsFull = storage.TotalNumberOfItems(egg) >= 50;

            if (turkeyCount > 0 && WorldTime.Seconds - eggTime >= 300)
            {
                if (!eggsFull)
                {
                    var eggAmt = MakeEggs(turkeyCount);
                    storage.TryAddItems(typeof(EggItem), eggAmt);
                }
                var featherAmt = MakeFeathers(turkeyCount);
                storage.TryAddItems(typeof(FeatherItem), featherAmt);
                eggTime = WorldTime.Seconds;
            }
        }

        private int MakeFeathers(int numOfTurkeys)
        {
            var featherCount = new int();
            for (var i = 0; i <= numOfTurkeys; i++)
            {
                var rand = RandomUtil.Range(0, 50);
                if (rand == 2) featherCount++;
            }
            return featherCount;
        }

        private int MakeEggs(int numOfTurkeys)
        {
            var eggCount = new int();
            for (var i = 0; i <= numOfTurkeys; i++)
            {
                var rand = RandomUtil.Range(0, 30);
                if (rand == 2) eggCount++;
            }
            return eggCount;
        }

        static TurkeyCoopObject()
        {
            AddOccupancy<TurkeyCoopObject>(new List<BlockOccupancy>()
            {
            new BlockOccupancy(new Vector3i(0, 0, 0)),
            new BlockOccupancy(new Vector3i(1, 0, 0)),
            new BlockOccupancy(new Vector3i(2, 0, 0)),
            new BlockOccupancy(new Vector3i(3, 0, 0)),
            new BlockOccupancy(new Vector3i(0, 0, 1)),
            new BlockOccupancy(new Vector3i(1, 0, 1)),
            new BlockOccupancy(new Vector3i(2, 0, 1)),
            new BlockOccupancy(new Vector3i(3, 0, 1)),
            new BlockOccupancy(new Vector3i(0, 0, 2)),
            new BlockOccupancy(new Vector3i(1, 0, 2)),
            new BlockOccupancy(new Vector3i(2, 0, 2)),
            new BlockOccupancy(new Vector3i(3, 0, 2)),
            new BlockOccupancy(new Vector3i(0, 1, 0)),
            new BlockOccupancy(new Vector3i(1, 1, 0)),
            new BlockOccupancy(new Vector3i(2, 1, 0)),
            new BlockOccupancy(new Vector3i(3, 1, 0)),
            new BlockOccupancy(new Vector3i(0, 1, 1)),
            new BlockOccupancy(new Vector3i(1, 1, 1)),
            new BlockOccupancy(new Vector3i(2, 1, 1)),
            new BlockOccupancy(new Vector3i(3, 1, 1)),
            new BlockOccupancy(new Vector3i(0, 1, 2)),
            new BlockOccupancy(new Vector3i(1, 1, 2)),
            new BlockOccupancy(new Vector3i(2, 1, 2)),
            new BlockOccupancy(new Vector3i(3, 1, 2)),
            new BlockOccupancy(new Vector3i(0, 2, 0)),
            new BlockOccupancy(new Vector3i(1, 2, 0)),
            new BlockOccupancy(new Vector3i(2, 2, 0)),
            new BlockOccupancy(new Vector3i(3, 2, 0)),
            new BlockOccupancy(new Vector3i(0, 2, 1)),
            new BlockOccupancy(new Vector3i(1, 2, 1)),
            new BlockOccupancy(new Vector3i(2, 2, 1)),
            new BlockOccupancy(new Vector3i(3, 2, 1)),
            new BlockOccupancy(new Vector3i(0, 2, 2)),
            new BlockOccupancy(new Vector3i(1, 2, 2)),
            new BlockOccupancy(new Vector3i(2, 2, 2)),
            new BlockOccupancy(new Vector3i(3, 2, 2)),
            new BlockOccupancy(new Vector3i(0, 3, 0)),
            new BlockOccupancy(new Vector3i(1, 3, 0)),
            new BlockOccupancy(new Vector3i(2, 3, 0)),
            new BlockOccupancy(new Vector3i(3, 3, 0)),
            new BlockOccupancy(new Vector3i(0, 3, 1)),
            new BlockOccupancy(new Vector3i(1, 3, 1)),
            new BlockOccupancy(new Vector3i(2, 3, 1)),
            new BlockOccupancy(new Vector3i(3, 3, 1)),
            new BlockOccupancy(new Vector3i(0, 3, 2)),
            new BlockOccupancy(new Vector3i(1, 3, 2)),
            new BlockOccupancy(new Vector3i(2, 3, 2)),
            new BlockOccupancy(new Vector3i(3, 3, 2)),

            });
        }
        /// <summary>Hook for mods to customize WorldObject before initialization. You can change housing values here.</summary>
        partial void ModsPreInitialize();
        /// <summary>Hook for mods to customize WorldObject after initialization.</summary>
        partial void ModsPostInitialize();
    }

    [Serialized]
    [LocDisplayName("Turkey Coop")]
    [Ecopedia("Crafted Objects", "Storage", createAsSubPage: true)]
    public partial class TurkeyCoopItem : WorldObjectItem<TurkeyCoopObject>
    {
        public override LocString DisplayDescription => Localizer.DoStr("Home for turkeys, passively produces eggs and feathers.");
        public override DirectionAxisFlags RequiresSurfaceOnSides { get; } = 0
                    | DirectionAxisFlags.Down
                ;

    }
    [RequiresSkill(typeof(CarpentrySkill), 1)]
    public partial class TurkeyCoopRecipe : RecipeFamily
    {
        public TurkeyCoopRecipe()
        {
            var recipe = new Recipe();
            recipe.Init(
                "AnimalPen",  //noloc
                Localizer.DoStr("Turkey Coop"),
                new List<IngredientElement>
                {
                    new IngredientElement("Lumber", 10), //noloc
                    new IngredientElement(typeof(NailItem), 20), //noloc
                },
                new List<CraftingElement>
                {
                    new CraftingElement<TurkeyCoopItem>()
                });
            this.Recipes = new List<Recipe> { recipe };
            this.LaborInCalories = CreateLaborInCaloriesValue(250);
            this.CraftMinutes = CreateCraftTimeValue(3);
            this.ModsPreInitialize();
            this.Initialize(Localizer.DoStr("Turkey Coop"), typeof(TurkeyCoopRecipe));
            this.ModsPostInitialize();
            CraftingComponent.AddRecipe(typeof(CarpentryTableObject), this);
        }

        /// <summary>Hook for mods to customize RecipeFamily before initialization. You can change recipes, xp, labor, time here.</summary>
        partial void ModsPreInitialize();
        /// <summary>Hook for mods to customize RecipeFamily after initialization, but before registration. You can change skill requirements here.</summary>
        partial void ModsPostInitialize();
    }
}
