// Copyright (c) Strange Loop Games. All rights reserved.
// See LICENSE file in the project root for full license information.
// <auto-generated from WorldObjectTemplate.tt />

namespace Eco.Mods.TechTree
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using Eco.Core.Items;
    using Eco.Gameplay.Blocks;
    using Eco.Gameplay.Components;
    using Eco.Gameplay.Components.Auth;
    using Eco.Gameplay.DynamicValues;
    using Eco.Gameplay.Economy;
    using Eco.Gameplay.Housing;
    using Eco.Gameplay.Interactions;
    using Eco.Gameplay.Items;
    using Eco.Gameplay.Modules;
    using Eco.Gameplay.Minimap;
    using Eco.Gameplay.Objects;
    using Eco.Gameplay.Players;
    using Eco.Gameplay.Property;
    using Eco.Gameplay.Skills;
    using Eco.Gameplay.Systems.TextLinks;
    using Eco.Gameplay.Pipes.LiquidComponents;
    using Eco.Gameplay.Pipes.Gases;
    using Eco.Gameplay.Systems.Tooltip;
    using Eco.Shared;
    using Eco.Shared.Math;
    using Eco.Shared.Localization;
    using Eco.Shared.Serialization;
    using Eco.Shared.Utils;
    using Eco.Shared.View;
    using Eco.Shared.Items;
    using Eco.Gameplay.Pipes;
    using Eco.World.Blocks;
    using Eco.Simulation.Time;
    using Eco.Gameplay.Housing.PropertyValues;
    using Eco.Gameplay.Systems.Messaging.Notifications;
    using System.Runtime.CompilerServices;

    [Serialized]
    [RequireComponent(typeof(PropertyAuthComponent))]
    [RequireComponent(typeof(LinkComponent))]
    [RequireComponent(typeof(PublicStorageComponent))]
    [RequireComponent(typeof(SolidAttachedSurfaceRequirementComponent))]
    public partial class BigPenObject : WorldObject, IRepresentsItem
    {
        public override LocString DisplayName { get { return Localizer.DoStr("Animal Pen"); } }
        public override TableTextureMode TableTexture => TableTextureMode.Wood;
        public virtual Type RepresentedItemType { get { return typeof(BigPenItem); } }
        [Serialized] private double poopTime;

        protected override void Initialize()
        {
            this.ModsPreInitialize();
            var storage = this.GetComponent<PublicStorageComponent>();
            storage.Initialize(10);
            storage.Storage.AddInvRestriction(new StackLimitRestriction(5));
            this.GetComponent<PublicStorageComponent>().Inventory.AddInvRestriction(new SpecificItemTypesRestriction(new System.Type[] { typeof(DomesticatedBisonItem), typeof(DomesticatedSheepItem), typeof(PoopItem) })); // can't store block or large itemsa
            this.ModsPostInitialize();
        }

        public override void Tick()
        {
            base.Tick();
            var bison = Item.Get(typeof(DomesticatedBisonItem));
            var sheep = Item.Get(typeof(DomesticatedSheepItem));
            var storage = this.GetComponent<PublicStorageComponent>().Inventory;
            var animalCount = storage.TotalNumberOfItems(bison) + storage.TotalNumberOfItems(sheep);

            if (animalCount > 0 && WorldTime.Seconds - poopTime >= 300)
            {
                var poopAmt = MakePoo(animalCount);
                storage.TryAddItems(typeof(PoopItem), poopAmt);
                poopTime = WorldTime.Seconds;
            }
        }

        private int MakePoo(int numOfAnimals)
        {
            var poopCount = new int();
            for (var i = 0; i <= numOfAnimals; i++)
            {
                var rand = RandomUtil.Range(0, 30);
                if (rand == 2) poopCount++;
            }
            return poopCount;
        }

        static BigPenObject()
        {
            AddOccupancy<BigPenObject>(new List<BlockOccupancy>()
            {
            new BlockOccupancy(new Vector3i(0, 0, 0)),
			// X-Forward Face
			new BlockOccupancy(new Vector3i(3, 0, 0)),
            new BlockOccupancy(new Vector3i(3, 0, 1)),
            new BlockOccupancy(new Vector3i(3, 0, 2)),
            new BlockOccupancy(new Vector3i(3, 0, 3)),
            new BlockOccupancy(new Vector3i(3, 0, -1)),
            new BlockOccupancy(new Vector3i(3, 0, -2)),
            new BlockOccupancy(new Vector3i(3, 0, -3)),
            new BlockOccupancy(new Vector3i(3, 1, 0)),
            new BlockOccupancy(new Vector3i(3, 1, 1)),
            new BlockOccupancy(new Vector3i(3, 1, 2)),
            new BlockOccupancy(new Vector3i(3, 1, 3)),
            new BlockOccupancy(new Vector3i(3, 1, -1)),
            new BlockOccupancy(new Vector3i(3, 1, -2)),
            new BlockOccupancy(new Vector3i(3, 1, -3)),
			// X-Backward Face
			new BlockOccupancy(new Vector3i(-3, 0, 0)),
            new BlockOccupancy(new Vector3i(-3, 0, 1)),
            new BlockOccupancy(new Vector3i(-3, 0, 2)),
            new BlockOccupancy(new Vector3i(-3, 0, 3)),
            new BlockOccupancy(new Vector3i(-3, 0, -1)),
            new BlockOccupancy(new Vector3i(-3, 0, -2)),
            new BlockOccupancy(new Vector3i(-3, 0, -3)),
            new BlockOccupancy(new Vector3i(-3, 1, 0)),
            new BlockOccupancy(new Vector3i(-3, 1, 1)),
            new BlockOccupancy(new Vector3i(-3, 1, 2)),
            new BlockOccupancy(new Vector3i(-3, 1, 3)),
            new BlockOccupancy(new Vector3i(-3, 1, -1)),
            new BlockOccupancy(new Vector3i(-3, 1, -2)),
            new BlockOccupancy(new Vector3i(-3, 1, -3)),
			// Y-Right Face
			new BlockOccupancy(new Vector3i(0, 0, 3)),
            new BlockOccupancy(new Vector3i(1, 0, 3)),
            new BlockOccupancy(new Vector3i(2, 0, 3)),
            new BlockOccupancy(new Vector3i(3, 0, 3)),
            new BlockOccupancy(new Vector3i(-1, 0, 3)),
            new BlockOccupancy(new Vector3i(-2, 0, 3)),
            new BlockOccupancy(new Vector3i(-3, 0, 3)),
            new BlockOccupancy(new Vector3i(0, 1, 3)),
            new BlockOccupancy(new Vector3i(1, 1, 3)),
            new BlockOccupancy(new Vector3i(2, 1, 3)),
            new BlockOccupancy(new Vector3i(3, 1, 3)),
            new BlockOccupancy(new Vector3i(-1, 1, 3)),
            new BlockOccupancy(new Vector3i(-2, 1, 3)),
            new BlockOccupancy(new Vector3i(-3, 1, 3)),
			// Y-Left Face
			new BlockOccupancy(new Vector3i(0, 0, -3)),
            new BlockOccupancy(new Vector3i(1, 0, -3)),
            new BlockOccupancy(new Vector3i(2, 0, -3)),
            new BlockOccupancy(new Vector3i(3, 0, -3)),
            new BlockOccupancy(new Vector3i(-1, 0, -3)),
            new BlockOccupancy(new Vector3i(-2, 0, -3)),
            new BlockOccupancy(new Vector3i(-3, 0, -3)),
            new BlockOccupancy(new Vector3i(0, 1, -3)),
            new BlockOccupancy(new Vector3i(1, 1, -3)),
            new BlockOccupancy(new Vector3i(2, 1, -3)),
            new BlockOccupancy(new Vector3i(3, 1, -3)),
            new BlockOccupancy(new Vector3i(-1, 1, -3)),
            new BlockOccupancy(new Vector3i(-2, 1, -3)),
            new BlockOccupancy(new Vector3i(-3, 1, -3)),
            });
        }
        /// <summary>Hook for mods to customize WorldObject before initialization. You can change housing values here.</summary>
        partial void ModsPreInitialize();
        /// <summary>Hook for mods to customize WorldObject after initialization.</summary>
        partial void ModsPostInitialize();
    }

    [Serialized]
    [LocDisplayName("Animal Pen")]
    [Ecopedia("Crafted Objects", "Storage", createAsSubPage: true)]
    public partial class BigPenItem : WorldObjectItem<BigPenObject>
    {
        public override LocString DisplayDescription => Localizer.DoStr("A pen for Bison and sheep. Needs to be cleaned of manure regularly");
        public override DirectionAxisFlags RequiresSurfaceOnSides { get; } = 0
                    | DirectionAxisFlags.Down
                ;

    }
    [RequiresSkill(typeof(CarpentrySkill), 1)]
    public partial class BigPenRecipe : RecipeFamily
    {
        public BigPenRecipe()
        {
            var recipe = new Recipe();
            recipe.Init(
                "AnimalPen",  //noloc
                Localizer.DoStr("Animal Pen"),
                new List<IngredientElement>
                {
                    new IngredientElement("Lumber", 10), //noloc
                    new IngredientElement(typeof(NailItem), 20), //noloc
                },
                new List<CraftingElement>
                {
                    new CraftingElement<BigPenItem>()
                });
            this.Recipes = new List<Recipe> { recipe };
            this.LaborInCalories = CreateLaborInCaloriesValue(250);
            this.CraftMinutes = CreateCraftTimeValue(3);
            this.ModsPreInitialize();
            this.Initialize(Localizer.DoStr("Animal Pen"), typeof(BigPenRecipe));
            this.ModsPostInitialize();
            CraftingComponent.AddRecipe(typeof(CarpentryTableObject), this);
        }

        /// <summary>Hook for mods to customize RecipeFamily before initialization. You can change recipes, xp, labor, time here.</summary>
        partial void ModsPreInitialize();
        /// <summary>Hook for mods to customize RecipeFamily after initialization, but before registration. You can change skill requirements here.</summary>
        partial void ModsPostInitialize();
    }
}
